// Test generated by RoostGPT for test testingNjsUnit0812 using AI Type Vertex AI and AI Model code-bison-32k


// preparing-data-test.js
const request = require("request");
const sinon = require("sinon");

const rawWeatherData = {
  coord: { lon: -0.13, lat: 51.51 },
  weather: [
    { id: 300, main: "Drizzle", description: "light intensity drizzle", icon: "09d" },
  ],
  main: { temp: 280.32, feels_like: 278.99, temp_min: 279.15, temp_max: 281.15, pressure: 1012, humidity: 81 },
  visibility: 10000,
  wind: { speed: 4.12, deg: 80 },
  clouds: { all: 90 },
  dt: 1655386148,
  sys: { type: 2, id: 2019646, country: "GB", sunrise: 1655343328, sunset: 1655403139 },
  timezone: 0,
  name: "London",
};

describe("Test that the data fetched from OpenWeatherMap is processed correctly", function () {
  it("Should check fetched data is processed correctly", function () {
    const callback = sinon.stub();
    callback.withArgs("London").returns(rawWeatherData);

    const processedData = processWeatherData(callback);

    expect(processedData).toEqual({
      city: "London",
      country: "GB",
      temperature: 280.32,
      feelsLike: 278.99,
      description: "light intensity drizzle",
    });
  });

  it("Should handle empty response from OpenWeatherMap", function () {
    const callback = sinon.stub();
    callback.withArgs("London").returns(null);

    const processedData = processWeatherData(callback);

    expect(processedData).toBeNull();
  });

  it("Should handle error response from OpenWeatherMap", function () {
    const callback = sinon.stub();
    callback.withArgs("London").throws(new Error("Error fetching weather data"));

    expect(() => processWeatherData(callback)).toThrowError("Error fetching weather data");
  });
});
