// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-nodejs using AI Type  and AI Model 

ROOST_METHOD_HASH=printLine_adf0a41ef1
ROOST_METHOD_SIG_HASH=printLine_a459837dee


*/

// ********RoostGPT********
const commandLineArgs = require('command-line-args');
const fetchWeather = require('./fetchWeather');

const cli = commandLineArgs([
    { name: "location", alias: "l", type: String, defaultValue: "London" }
]);

var location;
try {
    location = cli.parse().location;
} catch (error) {
    console.error('Error parsing command line arguments: ', error);
    process.exit(1);
}

/* Fetch weather data */
fetchWeather.fetchWeather(location, function (err, data) {
    if (err) {
        console.error('Error fetching weather data: ', err);
        process.exit(1);
    }

    /* Print weather data */
    console.log(data);
});


/* Jest Test Case */
const { printLine } = require('../weather/app');

describe('printLine', () => {
  let consoleOutput = [];
  const originalLog = console.log;

  beforeEach(() => {
    consoleOutput = [];
    console.log = message => consoleOutput.push(message);
  });

  afterEach(() => {
    console.log = originalLog;
  });

  test('should print the text with a checkmark in green when required is true', () => {
    printLine(true, 'test message');
    expect(consoleOutput[0]).toBe('\u001b[32m✔ test message\u001b[39m');
  });

  test('should print the text with a crossmark in red when required is false', () => {
    printLine(false, 'test message');
    expect(consoleOutput[0]).toBe('\u001b[31m✖ test message\u001b[39m');
  });

  test('should properly handle non-string text input', () => {
    printLine(true, 123);
    expect(consoleOutput[0]).toBe('\u001b[32m✔ 123\u001b[39m');
  });

  test('should properly handle empty text input', () => {
    printLine(true, '');
    expect(consoleOutput[0]).toBe('\u001b[32m✔ \u001b[39m');
  });
});
