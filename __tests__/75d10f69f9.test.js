// ********RoostGPT********
/*
Test generated by RoostGPT for test testM using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=869bcf28d1
ROOST_METHOD_SIG_HASH=75d10f69f9


*/

// ********RoostGPT********
const assert = require('assert');
const sinon = require('sinon');
const processData = require('./preparing-data-test');

describe('Test that the data fetched from OpenWeatherMap is processed correctly', function () {
    let sandbox;
    beforeEach(function () {
        sandbox = sinon.createSandbox();
    });

    afterEach(function () {
        sandbox.restore();
    });

    it('Should check fetched data is processed correctly', function () {
        const rawWeatherData = {
            name: 'London',
            main: { temp: 280.32, humidity: 81 },
            wind: { speed: 4.1 },
            weather: [{ description: 'light intensity drizzle' }]
        };

        const expectedProcessedData = {
            city: 'London',
            temperature: 7.17, // Kelvin to Celsius
            humidity: 81,
            windSpeed: 4.1,
            weatherDescription: 'light intensity drizzle'
        };

        const callback = sandbox.stub().returns(rawWeatherData);
        const actualProcessedData = processData(callback("London"));

        assert.deepStrictEqual(actualProcessedData, expectedProcessedData, 'Data is not processed correctly');
    });

    it('Should throw error if no data is passed', function () {
        const callback = sandbox.stub().returns(null);

        assert.throws(() => processData(callback("London")), Error, 'No data passed to be processed');
    });
});
