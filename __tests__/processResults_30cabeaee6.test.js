// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=processResults_44e0f4b06e
ROOST_METHOD_SIG_HASH=processResults_30cabeaee6


*/

// ********RoostGPT********
const { processResults } = require('./fetch-weather');

describe('processResults', () => {
  let allResults;

  beforeEach(() => {
    allResults = {
      main: {
        temp_min: 280,
        temp_max: 300,
      },
      rain: {
        '3h': 0.75
      },
      clouds: {
        all: 50
      }
    };
  });

  test('should return correct results when allResults is provided', () => {
    expect(processResults(allResults)).toEqual({
      minTemp: 6.85,
      maxTemp: 26.85,
      chanceRain: 0.83,
      rainFall: 0.75,
      cloudCover: 50
    });
  });

  test('should return default values when allResults is null', () => {
    expect(processResults(null)).toEqual({
      minTemp: -263.15,
      maxTemp: -263.15,
      chanceRain: 0.83,
      rainFall: 0,
      cloudCover: 10
    });
  });

  test('should return default values when properties in allResults are missing', () => {
    allResults.main = null;
    allResults.rain = null;
    allResults.clouds = null;
    expect(processResults(allResults)).toEqual({
      minTemp: -263.15,
      maxTemp: -263.15,
      chanceRain: 0.83,
      rainFall: 0,
      cloudCover: 10
    });
  });
});
