// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-nodejs using AI Type  and AI Model 

ROOST_METHOD_HASH=fetchWeather_d79458bb53
ROOST_METHOD_SIG_HASH=fetchWeather_2ec6f97b3f


*/

// ********RoostGPT********
const request = require("request");
const fetchWeather = require("../weather/fetch-weather");

jest.mock('request');

describe('fetchWeather', () => {
  let callback;

  beforeEach(() => {
    request.mockClear();
    callback = jest.fn();
  });

  test('should fetch weather data for a valid location', () => {
    const mockResponse = {
      statusCode: 200,
      body: {}
    };

    request.mockImplementation((options, cb) => {
      cb(null, mockResponse, mockResponse.body);
    });

    fetchWeather('London', callback);

    expect(request).toHaveBeenCalledWith(expect.objectContaining({
      url: expect.stringContaining('London'),
      json: true,
    }), expect.any(Function));

    expect(callback).toHaveBeenCalledWith(processResults(mockResponse.body));
  });

  test('should handle request errors', () => {
    const mockError = new Error('Request failed');

    request.mockImplementation((options, cb) => {
      cb(mockError, null, null);
    });

    fetchWeather('London', callback);

    expect(request).toHaveBeenCalledWith(expect.objectContaining({
      url: expect.stringContaining('London'),
      json: true,
    }), expect.any(Function));

    expect(callback).not.toHaveBeenCalled();
  });
});
