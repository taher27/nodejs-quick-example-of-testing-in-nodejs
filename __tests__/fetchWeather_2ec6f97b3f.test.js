// ********RoostGPT********
/*
Test generated by RoostGPT for test testM using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fetchWeather_e15d09d035
ROOST_METHOD_SIG_HASH=fetchWeather_2ec6f97b3f


*/

// ********RoostGPT********
const expect = require('chai').expect;
const sinon = require('sinon');
const request = require('request');
const fetchWeather = require('./fetch-weather');

describe('Fetch Weather', function() {
  let requestStub;

  beforeEach(() => {
    requestStub = sinon.stub(request, 'get');
  });

  afterEach(() => {
    request.get.restore();
  });

  it('should call callback with processed results when request is successful', function(done) {
    const mockResponseBody = {
      weather: [
        {
          main: 'Rain',
          description: 'light rain'
        }
      ],
      main: {
        temp: 280.15,
        humidity: 93
      },
      wind: {
        speed: 2.1
      }
    };

    requestStub.yields(null, {statusCode: 200}, mockResponseBody);

    fetchWeather('London', function(result) {
      expect(result).to.deep.equal({
        temperature: 280.15,
        humidity: 93,
        weather: 'Rain',
        description: 'light rain',
        windSpeed: 2.1
      });
      done();
    });
  });

  it('should handle request errors', function(done) {
    const mockError = new Error('Network error');

    requestStub.yields(mockError);

    fetchWeather('London', function(result) {
      expect(result).to.be.an('error');
      expect(result.message).to.equal('Network error');
      done();
    });
  });
});
