// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fetchWeather_e15d09d035
ROOST_METHOD_SIG_HASH=fetchWeather_2ec6f97b3f


*/

// ********RoostGPT********
const request = require('request');
const fetchWeather = require('./fetch-weather');

jest.mock('request');

describe('fetchWeather', () => {
  beforeAll(() => {
    request.mockClear();
  });

  test('calls the callback with processed results on success', done => {
    const mockResponse = {
      statusCode: 200,
      body: {
        weather: [
          { description: 'clear sky' }
        ],
        main: {
          temp: 289.5
        }
      }
    };
    request.mockImplementation((options, callback) => {
      callback(null, mockResponse, mockResponse.body);
    });

    const mockCallback = jest.fn();

    fetchWeather('London', mockCallback);

    setImmediate(() => {
      expect(mockCallback).toHaveBeenCalledTimes(1);
      expect(mockCallback).toHaveBeenCalledWith({
        description: 'clear sky',
        temperature: 16.35
      });
      done();
    });
  });

  test('does not call the callback on error', done => {
    const mockError = new Error('Network error');
    request.mockImplementation((options, callback) => {
      callback(mockError, null, null);
    });

    const mockCallback = jest.fn();

    fetchWeather('London', mockCallback);

    setImmediate(() => {
      expect(mockCallback).not.toHaveBeenCalled();
      done();
    });
  });
});
