// ********RoostGPT********
/*
Test generated by RoostGPT for test checkNodejsDepsInstalled using AI Type Open AI and AI Model gpt-4


ROOST_TEST_HASH=fetchWeather_8dcf21317f

*/

// ********RoostGPT********
const request = require('request');
const fetchWeather = require('./fetch-weather');

jest.mock('request');

describe('fetchWeather', () => {
  beforeEach(() => {
    request.mockClear();
  });

  it('should fetch weather data successfully', (done) => {
    const mockResponse = {
      statusCode: 200,
      body: {
        weather: [
          {
            description: 'clear sky'
          }
        ],
        main: {
          temp: 289.5
        }
      }
    };

    request.mockImplementation((options, callback) => {
      callback(null, mockResponse, mockResponse.body);
    });

    const mockCallback = jest.fn();

    fetchWeather('London', mockCallback);

    setImmediate(() => {
      expect(mockCallback).toHaveBeenCalledTimes(1);
      expect(mockCallback).toHaveBeenCalledWith(mockResponse.body);
      done();
    });
  });

  it('should handle request error', (done) => {
    const mockError = new Error('Network error');

    request.mockImplementation((options, callback) => {
      callback(mockError, null, null);
    });

    const mockCallback = jest.fn();

    fetchWeather('London', mockCallback);

    setImmediate(() => {
      expect(mockCallback).toHaveBeenCalledTimes(1);
      expect(mockCallback).toHaveBeenCalledWith(undefined);
      done();
    });
  });
});
