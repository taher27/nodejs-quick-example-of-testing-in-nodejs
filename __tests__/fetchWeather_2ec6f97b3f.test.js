// ********RoostGPT********
/*
Test generated by RoostGPT for test testM using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fetchWeather_e15d09d035
ROOST_METHOD_SIG_HASH=fetchWeather_2ec6f97b3f


*/

// ********RoostGPT********
const expect = require('chai').expect;
const nock = require('nock');
const fetchWeather = require('./fetch-weather');

describe('Fetch Weather', () => {
  beforeEach(() => {
    nock('http://api.openweathermap.org/data/2.5')
      .get('/weather?q=London&appid=aa0f1b0be45dca476178787f941c76dc')
      .reply(200, {
        weather: [{
          description: 'light rain',
        }],
        main: {
          temp: 289.5,
        },
      });
  });

  it('Gets the correct weather for a location', (done) => {
    fetchWeather('London', (err, result) => {
      expect(result).to.include({
        weather: [{
          description: 'light rain',
        }],
        main: {
          temp: 289.5,
        },
      });
      done();
    });
  });

  it('Returns error when location is not found', (done) => {
    nock.cleanAll();
    nock('http://api.openweathermap.org/data/2.5')
      .get('/weather?q=NonExistentLocation&appid=aa0f1b0be45dca476178787f941c76dc')
      .reply(404, {
        message: 'city not found',
      });

    fetchWeather('NonExistentLocation', (err, result) => {
      expect(err).to.equal('Error: city not found');
      done();
    });
  });
});
