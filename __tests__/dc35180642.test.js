// ********RoostGPT********
/*
Test generated by RoostGPT for test testM using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4c53294148
ROOST_METHOD_SIG_HASH=dc35180642


*/

// ********RoostGPT********
const expect = require('chai').expect;
const sinon = require('sinon');
const fetchWeather = require('../weather/fetchWeather');
const prepareForWeather = require('../weather/prepareForWeather');

describe('fetchWeather', function() {
  let sandbox;

  beforeEach(function() {
    sandbox = sinon.createSandbox();
  });

  afterEach(function() {
    sandbox.restore();
  });

  it('should prepare correctly for sunny weather', function(done) {
    sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
      callback('sunny');
    });

    let printLine = sinon.spy();
    let expectedWeatherKit = [
      { 'name': 'Umbrella', 'value': false },
      { 'name': 'Suncream', 'value': true },
      { 'name': 'Jumper', 'value': false },
      { 'name': 'Water', 'value': true },
    ];

    fetchWeather.fetchWeather('testLocation', function(today) {
      var weatherKit = [{
        'name': 'Umbrella',
        'value': prepareForWeather.doINeed.umbrella(today)
      }, {
        'name': 'Suncream',
        'value': prepareForWeather.doINeed.suncream(today)
      }, {
        'name': 'Jumper',
        'value': prepareForWeather.doINeed.jumper(today)
      }, {
        'name': 'Water',
        'value': prepareForWeather.doINeed.water(today)
      }];

      for (key in weatherKit) {
        printLine(weatherKit[key].value, weatherKit[key].name);
      }

      expect(printLine.callCount).to.equal(4);
      expect(printLine.calledWithExactly(false, 'Umbrella')).to.be.true;
      expect(printLine.calledWithExactly(true, 'Suncream')).to.be.true;
      expect(printLine.calledWithExactly(false, 'Jumper')).to.be.true;
      expect(printLine.calledWithExactly(true, 'Water')).to.be.true;

      done();
    });
  });

  it('should handle error from fetchWeather', function(done) {
    sandbox.stub(fetchWeather, 'fetchWeather').callsFake((location, callback) => {
      callback(null, new Error('Failed to fetch weather'));
    });

    let printLine = sinon.spy();

    fetchWeather.fetchWeather('testLocation', function(today, err) {
      expect(err).to.exist;
      expect(err.message).to.equal('Failed to fetch weather');
      expect(printLine.called).to.be.false;

      done();
    });
  });
});
