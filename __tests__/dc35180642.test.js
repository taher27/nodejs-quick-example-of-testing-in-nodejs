// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4c53294148
ROOST_METHOD_SIG_HASH=dc35180642


*/

// ********RoostGPT********
const fetchWeather = require('./app');
const prepareForWeather = require('./prepareForWeather');

describe('fetchWeather', () => {
  let mockPrintLine;

  beforeEach(() => {
    mockPrintLine = jest.fn();
    global.printLine = mockPrintLine;
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should fetch weather correctly and print line for each weather kit item', () => {
    const mockWeatherData = {
      temperature: 20,
      weather: 'Sunny',
    };
    const mockLocation = 'London';

    jest.spyOn(fetchWeather, 'fetchWeather').mockImplementation((location, callback) => {
      callback(mockWeatherData);
    });

    fetchWeather.fetchWeather(mockLocation, () => {});

    expect(prepareForWeather.doINeed.umbrella).toHaveBeenCalledWith(mockWeatherData);
    expect(prepareForWeather.doINeed.suncream).toHaveBeenCalledWith(mockWeatherData);
    expect(prepareForWeather.doINeed.jumper).toHaveBeenCalledWith(mockWeatherData);
    expect(prepareForWeather.doINeed.water).toHaveBeenCalledWith(mockWeatherData);

    expect(mockPrintLine).toHaveBeenCalledTimes(4);
  });

  test('should handle error when fetching weather fails', () => {
    const mockLocation = 'London';
    const mockError = new Error('Failed to fetch weather');

    jest.spyOn(fetchWeather, 'fetchWeather').mockImplementation((location, callback) => {
      throw mockError;
    });

    expect(() => fetchWeather.fetchWeather(mockLocation, () => {})).toThrowError(mockError);
  });
});
