// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4c53294148
ROOST_METHOD_SIG_HASH=dc35180642


*/

// ********RoostGPT********
// Importing the necessary modules
const fetchWeather = require('../weather/fetchWeather');
const prepareForWeather = require('../weather/prepareForWeather');
const printLine = require('../weather/printLine');

describe('fetchWeather function', () => {
  let location = 'London';
  let today = {
    temp: 20,
    humidity: 80,
    isRaining: true,
  };

  beforeEach(() => {
    // Mock the fetchWeather function
    jest.spyOn(fetchWeather, 'fetchWeather').mockImplementation((loc, cb) => {
      cb(today);
    });

    // Mock the prepareForWeather.doINeed functions
    jest.spyOn(prepareForWeather.doINeed, 'umbrella').mockReturnValue(true);
    jest.spyOn(prepareForWeather.doINeed, 'suncream').mockReturnValue(false);
    jest.spyOn(prepareForWeather.doINeed, 'jumper').mockReturnValue(false);
    jest.spyOn(prepareForWeather.doINeed, 'water').mockReturnValue(true);

    // Mock the printLine function
    jest.spyOn(console, 'log');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should correctly prepare for weather', () => {
    fetchWeather.fetchWeather(location, function (today) {
      var weatherKit = [{
        'name': 'Umbrella',
        'value': prepareForWeather.doINeed.umbrella(today)
      }, {
        'name': 'Suncream',
        'value': prepareForWeather.doINeed.suncream(today)
      }, {
        'name': 'Jumper',
        'value': prepareForWeather.doINeed.jumper(today)
      }, {
        'name': 'Water',
        'value': prepareForWeather.doINeed.water(today)
      }];
      for (key in weatherKit) {
        printLine(weatherKit[key].value, weatherKit[key].name);
      }
    });

    expect(fetchWeather.fetchWeather).toHaveBeenCalledWith(location, expect.any(Function));
    expect(prepareForWeather.doINeed.umbrella).toHaveBeenCalledWith(today);
    expect(prepareForWeather.doINeed.suncream).toHaveBeenCalledWith(today);
    expect(prepareForWeather.doINeed.jumper).toHaveBeenCalledWith(today);
    expect(prepareForWeather.doINeed.water).toHaveBeenCalledWith(today);
    expect(console.log).toHaveBeenCalledTimes(4);
  });

  test('should handle errors', () => {
    jest.spyOn(fetchWeather, 'fetchWeather').mockImplementation((loc, cb) => {
      throw new Error('Error fetching weather');
    });

    expect(() => {
      fetchWeather.fetchWeather(location, () => {});
    }).toThrow('Error fetching weather');
  });
});
