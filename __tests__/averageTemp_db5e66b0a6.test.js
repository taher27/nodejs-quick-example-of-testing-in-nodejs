// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-nodejs using AI Type  and AI Model 

ROOST_METHOD_HASH=averageTemp_700473064c
ROOST_METHOD_SIG_HASH=averageTemp_db5e66b0a6


*/

// ********RoostGPT********
// Import the required packages and the function to test
const { averageTemp } = require('../weather/prepared-for-the-weather.js');

// Define the test suite
describe('averageTemp', () => {
  // Test case 1: Check the average with valid numbers
  test('should return the average of two numbers', () => {
    const min = 10;
    const max = 20;
    const expected = 15;
    const result = averageTemp(min, max);
    expect(result).toBe(expected);
  });

  // Test case 2: Check the average with 0
  test('should return the average of zero and any number', () => {
    const min = 0;
    const max = 10;
    const expected = 5;
    const result = averageTemp(min, max);
    expect(result).toBe(expected);
  });

  // Test case 3: Check the case when one of the parameters is not a number
  test('should return NaN when one of the parameters is not a number', () => {
    const min = 'not a number';
    const max = 10;
    const result = averageTemp(min, max);
    expect(result).toBeNaN();
  });

  // Test case 4: Check the case when both parameters are not numbers
  test('should return NaN when both parameters are not numbers', () => {
    const min = 'not a number';
    const max = 'also not a number';
    const result = averageTemp(min, max);
    expect(result).toBeNaN();
  });
});
