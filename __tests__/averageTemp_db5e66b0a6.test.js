// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-nodejs using AI Type  and AI Model 

ROOST_METHOD_HASH=averageTemp_700473064c
ROOST_METHOD_SIG_HASH=averageTemp_db5e66b0a6


*/

// ********RoostGPT********
// Importing necessary dependencies
const { averageTemp } = require('../weather/prepared-for-the-weather.js');

// Test suite for averageTemp function
describe('averageTemp', () => {
  
  // Test case for valid numerical inputs
  test('should return correct average temperature for valid numerical inputs', () => {
    const min = 10;
    const max = 20;
    const expectedAverage = 15;
    expect(averageTemp(min, max)).toBe(expectedAverage);
  });

  // Test case for non-numerical inputs
  test('should return NaN for non-numerical inputs', () => {
    const min = '10';
    const max = '20';
    expect(averageTemp(min, max)).toBeNaN();
  });

  // Test case for when only one input is non-numerical
  test('should return NaN when only one input is non-numerical', () => {
    const min = 10;
    const max = '20';
    expect(averageTemp(min, max)).toBeNaN();
  });

  // Test case for when inputs are undefined
  test('should return NaN when inputs are undefined', () => {
    const min = undefined;
    const max = undefined;
    expect(averageTemp(min, max)).toBeNaN();
  });

  // Test case for when inputs are null
  test('should return NaN when inputs are null', () => {
    const min = null;
    const max = null;
    expect(averageTemp(min, max)).toBeNaN();
  });

});
