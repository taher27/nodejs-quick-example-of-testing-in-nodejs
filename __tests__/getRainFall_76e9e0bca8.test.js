// ********RoostGPT********
/*
Test generated by RoostGPT for test testM using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getRainFall_3237bb46a3
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
// Importing necessary modules
const expect = require('chai').expect;
const getRainFall = require('./fetch-weather');

// Describe block for grouping related test cases
describe('getRainFall', () => {
  let rainObj;

  // beforeEach hook for setting up common test data
  beforeEach(() => {
    rainObj = {};
  });

  // Test case for null input
  it('should return 0 when rainObj is null', () => {
    const result = getRainFall(null);
    expect(result).to.equal(0);
  });

  // Test case for undefined input
  it('should return 0 when rainObj is undefined', () => {
    const result = getRainFall();
    expect(result).to.equal(0);
  });

  // Test case for object without required properties
  it('should return 0 when rainObj does not contain 1h, 2h, or 3h properties', () => {
    const result = getRainFall(rainObj);
    expect(result).to.equal(0);
  });

  // Test case for object with 1h property
  it('should return the value of the 1h property when it is present', () => {
    rainObj['1h'] = 10;
    const result = getRainFall(rainObj);
    expect(result).to.equal(10);
  });

  // Test case for object with 2h property
  it('should return the value of the 2h property when it is present and 1h is not', () => {
    rainObj['2h'] = 20;
    const result = getRainFall(rainObj);
    expect(result).to.equal(20);
  });

  // Test case for object with 3h property
  it('should return the value of the 3h property when it is present and 1h and 2h are not', () => {
    rainObj['3h'] = 30;
    const result = getRainFall(rainObj);
    expect(result).to.equal(30);
  });
});
