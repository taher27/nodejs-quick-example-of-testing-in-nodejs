// ********RoostGPT********
/*
Test generated by RoostGPT for test testJ using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getRainFall_3237bb46a3
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
const fetchWeather = require('./fetch-weather');

describe('fetchWeather - getRainFall', () => {
  test('should return 0 when input is null or undefined', () => {
    expect(fetchWeather.getRainFall(null)).toBe(0);
    expect(fetchWeather.getRainFall(undefined)).toBe(0);
  });

  test('should return 0 when input does not have any of the properties "1h", "2h", "3h"', () => {
    expect(fetchWeather.getRainFall({})).toBe(0);
    expect(fetchWeather.getRainFall({ "4h": 5 })).toBe(0);
  });

  test('should return the value of property "1h" when it exists', () => {
    expect(fetchWeather.getRainFall({ "1h": 5 })).toBe(5);
    expect(fetchWeather.getRainFall({ "1h": 5, "2h": 10 })).toBe(5);
  });

  test('should return the value of property "2h" when it exists and "1h" does not', () => {
    expect(fetchWeather.getRainFall({ "2h": 5 })).toBe(5);
    expect(fetchWeather.getRainFall({ "2h": 5, "3h": 10 })).toBe(5);
  });

  test('should return the value of property "3h" when it exists and "1h" and "2h" do not', () => {
    expect(fetchWeather.getRainFall({ "3h": 5 })).toBe(5);
  });
});
