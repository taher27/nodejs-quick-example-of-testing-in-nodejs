// ********RoostGPT********
/*
Test generated by RoostGPT for test testing-nodejs using AI Type  and AI Model 

ROOST_METHOD_HASH=getRainFall_3237bb46a3
ROOST_METHOD_SIG_HASH=getRainFall_76e9e0bca8


*/

// ********RoostGPT********
// Import the function for testing
const { getRainFall } = require('../weather/fetch-weather');

// Define the test suite
describe('getRainFall', () => {
  
  // Test case 1: When rainObj is null or undefined, it should return 0
  test('should return 0 when rainObj is null or undefined', () => {
    const result = getRainFall(null);
    expect(result).toBe(0);
  });

  // Test case 2: When rainObj does not have '1h', '2h', or '3h' properties, it should return 0
  test('should return 0 when rainObj does not have 1h, 2h, or 3h properties', () => {
    const result = getRainFall({ '4h': 10 });
    expect(result).toBe(0);
  });

  // Test case 3: When rainObj has '1h' property, it should return the value of '1h'
  test('should return the value of 1h when rainObj has 1h property', () => {
    const result = getRainFall({ '1h': 5 });
    expect(result).toBe(5);
  });

  // Test case 4: When rainObj has '2h' but not '1h', it should return the value of '2h'
  test('should return the value of 2h when rainObj has 2h but not 1h', () => {
    const result = getRainFall({ '2h': 10 });
    expect(result).toBe(10);
  });

  // Test case 5: When rainObj has '3h' but not '1h' and '2h', it should return the value of '3h'
  test('should return the value of 3h when rainObj has 3h but not 1h and 2h', () => {
    const result = getRainFall({ '3h': 15 });
    expect(result).toBe(15);
  });

});
